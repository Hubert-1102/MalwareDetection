import os
import random
from sklearn.svm import LinearSVC
import math

random.seed(1024)
year1 = 2012
year2 = 2012
importance = 0
total_importance = 0
suspicious_features = {}
# benign_path = f'./dataset/test_goodware%d' % year1
benign_path = f'./dataset/%dgoodware' % year1
malware_path = f'./dataset/%dmalware' % year2
# malware_path = f'./dataset/test_malware%d' % year2

threshold = 2000
required_features = {'RequestedPermission', 'UsedPermissions', 'RestrictedApi', 'SuspiciousApi'}
benign_apps = os.listdir(benign_path)
malware_apps = os.listdir(malware_path)
all_apps = benign_apps + malware_apps
feature_counts = {}
suspicious = 0
max_importance = 0


def get_importance_feature(benign_apps, malware_apps):
    # 对所有训练数据中的feature出现次数进行统计
    for app in benign_apps:
        with open(os.path.join(benign_path, app), 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                ss = line.replace('\n', '').split('List_')
                if ss[0] in required_features:
                    if ss[1] not in feature_counts:
                        feature_counts[ss[1]] = 1
                    else:
                        feature_counts[ss[1]] += 1
        file.close()
    for app in malware_apps:
        with open(os.path.join(malware_path, app), 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                ss = line.replace('\n', '').split('List_')
                if ss[0] in required_features:
                    if ss[1] not in feature_counts:
                        feature_counts[ss[1]] = 1
                    else:
                        feature_counts[ss[1]] += 1
        file.close()


def feature2vector(benign_apps, malware_apps, feature_map):
    cvt_vectors = []
    for app in benign_apps:
        feature = feature_map.copy()
        # if random.randint(0, 15) < 15:
        #     feature['test_feature'] = 1
        with open(os.path.join(benign_path, app), 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                ss = line.replace('\n', '').split('List_')
                if ss[1] in feature_map:
                    feature[ss[1]] = 1
        feature = list(feature.values())
        cvt_vectors.append((feature, 0))
        file.close()
    for app in malware_apps:
        feature = feature_map.copy()
        # if random.randint(0, 15) < 1:
        #     feature['test_feature'] = 1
        with open(os.path.join(malware_path, app), 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                ss = line.replace('\n', '').split('List_')
                if ss[1] in feature_map:
                    feature[ss[1]] = 1
        feature = list(feature.values())
        cvt_vectors.append((feature, 1))
        file.close()
    random.shuffle(cvt_vectors)
    return cvt_vectors


def get_feature_label(vectors):
    features = []
    labels = []
    for feature, label in vectors:
        features.append(feature)
        labels.append(label)
    l = int(len(labels) * 0.8)
    return features[:l], labels[:l], features[l:], labels[l:]


def get_sorted_features():
    important_features = sorted(feature_counts.items(), key=lambda x: -x[1])
    count = 0
    feature_map = {}
    for f, c in important_features:
        feature_map[f] = 0
        count += 1
        if count >= threshold:
            break
    return feature_map


def classify(train_data, train_label, test_data, test_label):
    svc = LinearSVC(dual=False)
    svc.fit(train_data, train_label)
    ordered_index = sorted(range(len(svc.coef_[0])), key=lambda k: -abs(svc.coef_[0][k]))
    r_list = []
    global max_importance
    max_importance = abs(svc.coef_[0][ordered_index[0]])
    max_importance = calculate_score(1, abs(svc.coef_[0][ordered_index[0]]))
    for i in range(1):
        # with open(f'./files/%s-%s.txt' % (malware_path.split('/')[2], benign_path.split('/')[2]), 'w') as file:
        for index in range(50):
            r_list.append(list(feature_map.keys())[ordered_index[index]])
            find_in_txt(list(feature_map.keys())[ordered_index[index]], abs(svc.coef_[0][ordered_index[index]]),
                        index + 1)
            print(list(feature_map.keys())[ordered_index[index]], svc.coef_[0][ordered_index[index]])
            # file.write(f'%s\n' % list(feature_map.keys())[ordered_index[index]])
        print(svc.score(test_data, test_label))
        print(f'{suspicious} api/permissions are found in list')
        print(f'{importance} feature importance, total importance is {sum(abs(svc.coef_[0]))}')
        print(f'ratio = {importance / sum(abs(svc.coef_[0]))}')
        # file.close()
        print()
        total_score =0
        for suspicious_feature, (rank, value, score) in suspicious_features.items():
            total_score+=score
            print(f'rank: {rank}       value: {value}     score: {score}      {suspicious_feature}:')
        print(f'the sum of score is {total_score}')


def find_in_txt(api, value, rank):
    with open('./total.txt', 'r') as file:
        lines = file.readlines()
        global suspicious, importance
        for line in lines:
            if api + '\n' == line:
                suspicious += 1
                importance += value
                suspicious_features[api] = (rank, value, calculate_score(rank, value) / max_importance)
                break
        file.close()


def calculate_score(rank, value):
    m = 2.5
    score = m * 2 * (math.exp(1) / m) ** (-rank) * (math.exp(abs(value)) - 1)

    return score


if __name__ == '__main__':
    get_importance_feature(benign_apps, malware_apps)
    feature_map = get_sorted_features()
    # feature_map['test_feature'] = 0
    vectors = feature2vector(benign_apps, malware_apps, feature_map)
    train_data, train_label, test_data, test_label = get_feature_label(vectors)
    classify(train_data, train_label, test_data, test_label)
